Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10,000 records
Using the code below, SQL will display the total number of entries at the bottom of the query result. The COUNT() function can also be used, however such a function
ignores null values and thus may be inaccurate if the data is incomplete. The method used below allows the user to get a view of the type of data in each table as a bonus.
"
SELECT *
FROM attribute
"
ii. Business table = 10,000 records
Similarly to (i.), see explanation.

iii. Category table = 10,000 records
Similarly to (i.), see explanation.

iv. Checkin table = 10,000 records
Similarly to (i.), see explanation.

v. elite_years table = 10,000 records
Similarly to (i.), see explanation.

vi. friend table = 10,000 records
Similarly to (i.), see explanation.

vii. hours table = 10,000 records
Similarly to (i.), see explanation.

viii. photo table = 10,000 records
Similarly to (i.), see explanation.

ix. review table = 10,000 records
Similarly to (i.), see explanation.

x. tip table = 10,000 records
Similarly to (i.), see explanation.

xi. user table = 10,000 records
Similarly to (i.), see explanation.
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10,000 records
The primary key for the business table is the column called "id". In it, the system will assign a unique identifier to each table entry. The number of distinct records will
correspond to this id value. 
"
SELECT DISTINCT(id)
FROM business
"
In this code, I used the distinct function to find the number of distinct businesses. Each business should have a unique id.

ii. Hours = 1,562 records
Using the foreign key of business_id, and the distinct function, you arrive at this number. There are 1562 distinct businesses with 1 or more hours detailed in the table. This means not all 10,000 businesses have a record of
their hours. 
"
SELECT DISTINCT(business_id)
FROM hours
"

If you can also determine the overall "unique" entries by also selecting the hours table. 
"
SELECT DISTINCT(business_id), hours
FROM hours

RESULT: 10,000 records
"
This will show all the distinct entries for business_id and hours. Since every business can have more than one set of operating hours.

iii. Category = 2,643 records
Using the foreign key of business_id again, you find that there are 2,643 businesses with one or more category assigned to them. Meaning roughly 26% of all businesses in the data base are categorized.
"
SELECT DISTINCT(business_id)
FROM category
"

If you can also determine the overall "unique" entries by also selecting the hours table. 
"
SELECT DISTINCT(business_id), category
FROM category

RESULT: 10,000 records
"
This will show you all non-repeated entries (overall unique entries.)

iv. Attribute = 1,115 records
Using the foreign key, business id we can determine that there are 1,115 unique businesses that have one attribute or more assigned to them. This means most businesses in the database
do not have an attribute assigned.
"
SELECT DISTINCT(business_id)
FROM attribute
"

Specifying that we also want to see all distinct attributes for all distinct businesses we observe that there are no repeat entries:
"
SELECT DISTINCT(business_id), name
FROM attribute

RESULT: 10,000 records
"

v. Review = 10,000 unique reviews for 8,090 unique businesses from 8,581 unique users.
The table has the primary key "id" and the foreign keys "business_id" and "user_id"sing a similar select statement to the one below, we can find all distinct businesses represented in the table 8,090. A similar query can be used to find all
unique reviews and users. This data means that, of the 10,000 businesses in the database, 8,090 have been reviewed. Each review is unique.
"
SELECT DISTICT(business_id)
FROM review
"

vi. Checkin = 493 records
Using the foreign key, business_id, there are 493 unique businesses that have a check-in record.

vii. Photo = 10,000 unique photos from 6,493 unique businesses. 
Using primary key, photos, we find that all photos in the table are unique. These fotos correspond to 6,493/10,00 businesses in the database (using business_id foreign key).

viii. Tip = 537 unique users with tips for 3979 unique businesses. 
Using the foreign keys user_id and business_id in the tip table, you can identify that the data includes these unique records. 

ix. User = 10,000 users
Using the primary key "id" for the user table, we find that the database has 10,000 distinct entries for users

x. Friend = 11 distinct users with 9415 associated friends.
Using the foreign key user_id, we may find which users have associated friends.

xi. Elite_years = 2,780 users with elite years
2,780 users are part of the elite table when classified with the foreign key user_id.

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:
	-- count the numer of ids in the specified table
	SELECT COUNT(id)
	From user
	-- creates a table WHERE only null values exists by using OR to link various IS NULL statements
	WHERE name IS NULL 
	OR review_count IS NULL 
	OR yelping_since IS NULL 
	-- the columns below are made of numerical values, note the product of a number and a NULL is NULL. Therefore, the product of the columns specified turns out to be NULL if any of the columns is NULL
	OR  useful*funny*cool*fans*average_stars IS NULL
	OR compliment_hot*compliment_more*compliment_profile*compliment_cute*compliment_list*compliment_note*compliment_plain*compliment_cool*compliment_funny*compliment_writer*compliment_photos IS NULL

4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer: 
-- selected the city and summed the review count where the table is grouped by city. This yields the tot number of reviews per city. 
	SELECT city, SUM(review_count) AS totReviews
	FROM business
-- grouping by city is crucial because it will try to filter all the data by city allowing the query to sum all the review counts per each city
	GROUP BY city
-- the number of reviews was named "totReviews" in the select statement now we order it by descending order.
	ORDER BY totReviews DESC
	
	
	Copy and Paste the Result Below:
	+-----------------+------------+
	| city            | totReviews |
	+-----------------+------------+
	| Las Vegas       |      82854 |
	| Phoenix         |      34503 |
	| Toronto         |      24113 |
	| Scottsdale      |      20614 |
	| Charlotte       |      12523 |
	| Henderson       |      10871 |
	| Tempe           |      10504 |
	| Pittsburgh      |       9798 |
	| Montr√©al        |       9448 |
	| Chandler        |       8112 |
	| Mesa            |       6875 |
	| Gilbert         |       6380 |
	| Cleveland       |       5593 |
	| Madison         |       5265 |
	| Glendale        |       4406 |
	| Mississauga     |       3814 |
	| Edinburgh       |       2792 |
	| Peoria          |       2624 |
	| North Las Vegas |       2438 |
	| Markham         |       2352 |
	| Champaign       |       2029 |
	| Stuttgart       |       1849 |
	| Surprise        |       1520 |
	| Lakewood        |       1465 |
	| Goodyear        |       1155 |
	+-----------------+------------+
	(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
-- select the stars while counting the number of entries for each star rating
	SELECT stars, COUNT(id) AS countStars
	FROM business
-- query only entries corresponding to the city Avon
	WHERE city = 'Avon'
-- group by stars to show the number of businesses with that star rating
	GROUP BY stars
-- order for neatness sake
	ORDER BY stars ASC

Copy and Paste the Resulting Table Below (2 columns √¢‚Ç¨‚Äú star rating and count):
	+-------+------------+
	| stars | countStars |
	+-------+------------+
	|   1.5 |          1 |
	|   2.5 |          2 |
	|   3.5 |          3 |
	|   4.0 |          2 |
	|   4.5 |          1 |
	|   5.0 |          1 |
	+-------+------------+


ii. Beachwood

SQL code used to arrive at answer:
-- select the city and stars while counting the number of entries for each star rating
	SELECT stars, COUNT(id) AS countStars
	FROM business
-- query only entries corresponding to the city Beachwood
	WHERE city = 'Beachwood'
-- group by stars to show the number of businesses with that star rating
	GROUP BY stars
-- order for neatness sake
	ORDER BY stars ASC


Copy and Paste the Resulting Table Below (2 columns √¢‚Ç¨‚Äú star rating and count):
	+-------+------------+
	| stars | countStars |
	+-------+------------+
	|   2.0 |          1 |
	|   2.5 |          1 |
	|   3.0 |          2 |
	|   3.5 |          2 |
	|   4.0 |          1 |
	|   4.5 |          2 |
	|   5.0 |          5 |
	+-------+------------+

7. Find the top 3 users based on their total number of reviews: Gerald (2000), Sara(1629), and Yuri(1339)
		
	SQL code used to arrive at answer:
	-- SELECT the user.name and their review count since all users are unique in the user table
		SELECT name, review_count
		FROM user
	-- Order them in descending order by review count to find the top 3
		ORDER BY review_count DESC
	
		
	Copy and Paste the Result Below:
	+-----------+--------------+
	| name      | review_count |
	+-----------+--------------+
	| Gerald    |         2000 |
	| Sara      |         1629 |
	| Yuri      |         1339 |
	| .Hon      |         1246 |
	| William   |         1215 |
	| Harald    |         1153 |
	| eric      |         1116 |
	| Roanna    |         1039 |
	| Mimi      |          968 |
	| Christine |          930 |
	| Ed        |          904 |
	| Nicole    |          864 |
	| Fran      |          862 |
	| Mark      |          861 |
	| Christina |          842 |
	| Dominic   |          836 |
	| Lissa     |          834 |
	| Lisa      |          813 |
	| Alison    |          775 |
	| Sui       |          754 |
	| Tim       |          702 |
	| L         |          696 |
	| Angela    |          694 |
	| Crissy    |          676 |
	| Lyn       |          675 |
	+-----------+--------------+
	(Output limit exceeded, 25 of 10000 total rows shown)


8. Does posing more reviews correlate with more fans? No it does not

	Please explain your findings and interpretation of the results: If reviews correlate with fans then we'd find that fans trend upwards with review count.
	Therefore we query:
	"
-- SELECT the review_count and number of fans per user, create an additional column with the ratio of reviews to fans.
	SELECT name, review_count, fans, review_count/fans AS rev2fans
	FROM user
	ORDER BY review_count DESC
	"
	SQL Result: 
	+-----------+--------------+------+----------+
	| name      | review_count | fans | rev2fans |
	+-----------+--------------+------+----------+
	| Gerald    |         2000 |  253 |        7 |
	| Sara      |         1629 |   50 |       32 |
	| Yuri      |         1339 |   76 |       17 |
	| .Hon      |         1246 |  101 |       12 |
	| William   |         1215 |  126 |        9 |
	| Harald    |         1153 |  311 |        3 |
	| eric      |         1116 |   16 |       69 |
	| Roanna    |         1039 |  104 |        9 |
	| Mimi      |          968 |  497 |        1 |
	| Christine |          930 |  173 |        5 |
	| Ed        |          904 |   38 |       23 |
	| Nicole    |          864 |   43 |       20 |
	| Fran      |          862 |  124 |        6 |
	| Mark      |          861 |  115 |        7 |
	| Christina |          842 |   85 |        9 |
	| Dominic   |          836 |   37 |       22 |
	| Lissa     |          834 |  120 |        6 |
	| Lisa      |          813 |  159 |        5 |
	| Alison    |          775 |   61 |       12 |
	| Sui       |          754 |   78 |        9 |
	| Tim       |          702 |   35 |       20 |
	| L         |          696 |   10 |       69 |
	| Angela    |          694 |  101 |        6 |
	| Crissy    |          676 |   25 |       27 |
	| Lyn       |          675 |   45 |       15 |
	+-----------+--------------+------+----------+
	(Output limit exceeded, 25 of 10000 total rows shown
	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: love

	
	SQL code used to arrive at answer: 
-- use case statement to create a column that identifies reviews that include hate or love.
	SELECT
	CASE
-- use wildcards to find the key word if it is included, prioritize identifying reviews that include both words
	WHEN text LIKE '%love%' AND text LIKE '%hate%' THEN 'both'
	WHEN text LIKE '%love%' THEN 'love'
	WHEN text LIKE '%hate%' THEN 'hate'
-- label results that don't fit into the other categories as others
	ELSE 'Other'
	END AS result, 
-- SELECT a count of the text statements in each case
	COUNT(text)
	FROM review
-- group by each result to accurately show what case each review falls in
	GROUP BY result

RESULT:
	+--------+-------------+
	| result | COUNT(text) |
	+--------+-------------+
	| Other  |        8042 |
	| both   |          54 |
	| hate   |         178 |
	| love   |        1726 |
	+--------+-------------+
	
	
10. Find the top 10 users with the most fans: Amy, Mimi, Harld, Geral, Christine, Lisa, Cat, William, Fran, and Lissa

	SQL code used to arrive at answer:
-- SELECT the id, name, and number of fans of users
	SELECT id, name, fans
	FROM user
-- order users in descending order base on number of fans
	ORDER BY fans DESC
-- limit the output to only the top 10 users. 
	LIMIT 10
	
	Copy and Paste the Result Below:
	+------------------------+-----------+------+
	| id                     | name      | fans |
	+------------------------+-----------+------+
	| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
	| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
	| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
	| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
	| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
	| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
	| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
	| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
	| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
	+------------------------+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	city: Las Vegas
	category: Restuarants

i. Do the two groups you chose to analyze have a different distribution of hours?
Businesses in the chosen category and city have similar distributions for both the 2-3 star range and the 4-5 star range and vary only in the actual range of hours (the availability is similar).


ii. Do the two groups you chose to analyze have a different number of reviews?
Yes, Restaurants in Las Vegas with 2-3 stars have 123 review while those with 4-5 stars have 939 reviews.
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
Yes, neighborhoods with a higher average rating will have a higher count of group 2 businesses than group 1. 

SQL code used for analysis:
i. ******
SELECT name, groupcat, hours,
-- organize the days into separate numbers
CASE 
    WHEN hours LIKE 'Monday%' THEN 1
    WHEN hours LIKE 'Tuesday%' THEN 2
    WHEN hours LIKE 'Wednesday%' THEN 3
    WHEN hours LIKE 'Thursday%' THEN 4
    WHEN hours LIKE 'Friday%' THEN 5
    WHEN hours LIKE 'Saturday%' THEN 6
    WHEN hours LIKE 'Sunday%' THEN 7
    ELSE 'none'
    END AS distHours
-- nest the filtered data that includes both the business data joined with the category for each respective business
FROM (SELECT id, bus.name, neighborhood, city, stars, review_count, category,
-- create a case for the necessary groups
CASE 
WHEN stars >= 2 AND stars <= 3 THEN '1'
WHEN stars >= 4.0 AND stars <= 5 THEN '2'
ELSE NULL
END AS groupcat
FROM business AS bus
-- left join to obtain category data
LEFT JOIN category AS cat 
ON bus.id = cat.business_id
-- filter results by the chosen city and category ensuring no data from outside the star ranges is included
WHERE groupcat IS NOT NULL AND city = 'Las Vegas' AND category = 'Restaurants'
ORDER BY stars ASC) AS nest1
LEFT JOIN hours 
ON nest1.id = hours.business_id
ORDER BY groupcat, distHours

ii. *****
SELECT city, category, SUM(review_count),
-- create a case for the necessary groups
CASE 
WHEN stars >= 2 AND stars <= 3 THEN '1'
WHEN stars >= 4.0 AND stars <= 5 THEN '2'
ELSE NULL
END AS groupcat
FROM business AS bus
-- left join to obtain category data
LEFT JOIN category AS cat 
ON bus.id = cat.business_id
-- filter results by the chosen city and category ensuring no data from outside the star ranges is included
WHERE groupcat IS NOT NULL AND city = 'Las Vegas' AND category = 'Restaurants'
GROUP BY groupcat
ORDER BY stars ASC

iii. ************
SELECT neighborhood, AVG(stars) AS starsAVG, city, count(id),
-- create a case for the necessary groups
CASE 
WHEN stars >= 2 AND stars <= 3 THEN '1'
WHEN stars >= 4.0 AND stars <= 5 THEN '2'
ELSE NULL
END AS groupcat
FROM business AS bus
-- left join to obtain category data
LEFT JOIN category AS cat 
ON bus.id = cat.business_id
-- filter results by the chosen city and category ensuring no data from outside the star ranges is included
WHERE groupcat IS NOT NULL AND city = 'Las Vegas'
GROUP BY neighborhood, groupcat
ORDER BY neighborhood ASC
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: More businesses in the database are open than closed
         
         
ii. Difference 2: There are more reviews for open businesses than for closed ones. 
         
         
         
SQL code used for analysis:
SELECT is_open, SUM(review_count), AVG(stars), count(id)
FROM business AS bus
GROUP BY is_open

RESULT:
+---------+-------------------+---------------+-----------+
| is_open | SUM(review_count) |    AVG(stars) | count(id) |
+---------+-------------------+---------------+-----------+
|       0 |             35261 | 3.52039473684 |      1520 |
|       1 |            269300 | 3.67900943396 |      8480 |
+---------+-------------------+---------------+-----------+
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
National Supremacy - observing the scores, reviews, and existence of businesses in each country of the database 

ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
The idea of the analysis is to determine which country has the best businesses based on the data available. First the state location of each business wil be needed to determine which country they are in. From preliminary
profiling, I have determined that the countries whose businesses are represented in the database are: Argentina, Germany, United Kingdom, USA, and Canada. Second, we will need their star scores for the businesses in each 
country, by averaging the scores of all businesses per country, we may see how each country is rated overall. Finally, a certain emphasis should be placed on the amount of reviews that are present for each country. It 
stands to reason that a country with more businesses and reviews will have a more accurate star review. Taking these parameters we can develop a full picture of the data per each country.

iii. Output of your finished dataset:
         
+----------------+---------------+-----------+
| country        |      avgstars | accuScore |
+----------------+---------------+-----------+
| United Kingdom | 3.77985074627 |        11 |
| Germany        | 3.77122641509 |        11 |
| USA            | 3.69085002707 |        34 |
| Canada         |  3.5032879286 |        22 |
| Argentina      | 3.33333333333 |         5 |
+----------------+---------------+-----------+

iv. Provide the SQL code you used to create your final dataset:

-- select the country, the average star rating and create an accuracy score (reviews/number of entries)
SELECT country, avgstars, (totReviews/totCount) AS accuScore
-- Create a nested select statement to allow us to use the grouped country data
FROM (SELECT 
-- Create a column that sorts all entries per each country
CASE 
WHEN state = 'ST' OR state = 'ELN' OR state = 'BW' OR state = 'NI' THEN 'Germany'
WHEN state = 'ELN' OR state = 'MLN' OR state = 'EDH' OR state = 'FIF' 
    OR state = 'HLD' OR state = 'NYK' OR state = 'ESX' OR state = 'WLN' THEN 'United Kingdom'
WHEN state = 'QC' OR state = 'ON' THEN 'Canada'
WHEN state = 'PA' OR state = 'NV' OR state = 'AZ' OR state = 'WI' OR state = 'OH' 
    OR state = 'NC' OR state = 'SC' OR state = 'IL' OR state = 'NY' THEN 'USA'
WHEN state = 'C' THEN 'Argentina'
ELSE 'Other'
END AS country,
-- Call the relevant information
AVG(stars) AS avgstars, count(id) AS totCount, SUM(review_count) AS totReviews
FROM business
-- group all entries based on their county
GROUP BY country)
ORDER BY avgstars DESC